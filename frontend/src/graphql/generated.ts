import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  ISO8601DateTime: any;
};

/** Autogenerated input type of CreateLearningGoal */
export type CreateLearningGoalInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  params: LearningGoalAttributes;
};

/** Autogenerated return type of CreateLearningGoal */
export type CreateLearningGoalPayload = {
  __typename?: 'CreateLearningGoalPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  learningGoal: LearningGoal;
};

/** Autogenerated input type of CreateLearningRecord */
export type CreateLearningRecordInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  params: LearningRecordAttributes;
};

/** Autogenerated return type of CreateLearningRecord */
export type CreateLearningRecordPayload = {
  __typename?: 'CreateLearningRecordPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  learningRecord: LearningRecord;
};

/** Autogenerated input type of CreateUser */
export type CreateUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  params: UserAttributes;
};

/** Autogenerated return type of CreateUser */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  user: User;
};

/** Autogenerated input type of DeleteLearningGoal */
export type DeleteLearningGoalInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteLearningGoal */
export type DeleteLearningGoalPayload = {
  __typename?: 'DeleteLearningGoalPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of DeleteUser */
export type DeleteUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteUser */
export type DeleteUserPayload = {
  __typename?: 'DeleteUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

export type LearningGoal = {
  __typename?: 'LearningGoal';
  body?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  user: User;
  userId: Scalars['Int'];
};

export type LearningGoalAttributes = {
  body?: InputMaybe<Scalars['String']>;
  title: Scalars['String'];
  userId: Scalars['Int'];
};

export type LearningRecord = {
  __typename?: 'LearningRecord';
  createdAt: Scalars['ISO8601DateTime'];
  endingAt?: Maybe<Scalars['ISO8601DateTime']>;
  id: Scalars['ID'];
  learningGoalId: Scalars['Int'];
  learningGoals: Array<LearningGoal>;
  startAt: Scalars['ISO8601DateTime'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type LearningRecordAttributes = {
  endingAt: Scalars['ISO8601DateTime'];
  learningGoalId: Scalars['Int'];
  startAt: Scalars['ISO8601DateTime'];
};

export type Mutation = {
  __typename?: 'Mutation';
  createLearningGoal?: Maybe<CreateLearningGoalPayload>;
  createLearningRecord?: Maybe<CreateLearningRecordPayload>;
  createUser?: Maybe<CreateUserPayload>;
  deleteLearningGoal?: Maybe<DeleteLearningGoalPayload>;
  deleteUser?: Maybe<DeleteUserPayload>;
  updateUser?: Maybe<UpdateUserPayload>;
};


export type MutationCreateLearningGoalArgs = {
  input: CreateLearningGoalInput;
};


export type MutationCreateLearningRecordArgs = {
  input: CreateLearningRecordInput;
};


export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


export type MutationDeleteLearningGoalArgs = {
  input: DeleteLearningGoalInput;
};


export type MutationDeleteUserArgs = {
  input: DeleteUserInput;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};

export type Query = {
  __typename?: 'Query';
  learningGoal: LearningGoal;
  learningGoals: Array<LearningGoal>;
  learningRecord: LearningRecord;
  user: User;
  users: Array<User>;
};


export type QueryLearningGoalArgs = {
  id: Scalars['ID'];
};


export type QueryLearningRecordArgs = {
  id: Scalars['ID'];
};


export type QueryUserArgs = {
  id: Scalars['ID'];
};

/** Autogenerated input type of UpdateUser */
export type UpdateUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  params: UserAttributes;
};

/** Autogenerated return type of UpdateUser */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  user: User;
};

export type User = {
  __typename?: 'User';
  createdAt: Scalars['ISO8601DateTime'];
  email: Scalars['String'];
  id: Scalars['ID'];
  learningGoals: Array<LearningGoal>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type UserAttributes = {
  email: Scalars['String'];
};

export type CreateLearningGoalMutationVariables = Exact<{
  params: LearningGoalAttributes;
}>;


export type CreateLearningGoalMutation = { __typename?: 'Mutation', createLearningGoal?: { __typename?: 'CreateLearningGoalPayload', learningGoal: { __typename?: 'LearningGoal', id: string, title: string, body?: string | null } } | null };

export type CreateLearningRecordMutationVariables = Exact<{
  params: LearningRecordAttributes;
}>;


export type CreateLearningRecordMutation = { __typename?: 'Mutation', createLearningRecord?: { __typename?: 'CreateLearningRecordPayload', learningRecord: { __typename?: 'LearningRecord', id: string, startAt: any, endingAt?: any | null, learningGoalId: number } } | null };

export type CreateUserMutationVariables = Exact<{
  params: UserAttributes;
}>;


export type CreateUserMutation = { __typename?: 'Mutation', createUser?: { __typename?: 'CreateUserPayload', user: { __typename?: 'User', id: string, email: string } } | null };

export type DeleteLearningGoalMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteLearningGoalMutation = { __typename?: 'Mutation', deleteLearningGoal?: { __typename?: 'DeleteLearningGoalPayload', id: string } | null };

export type DeleteUserMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type DeleteUserMutation = { __typename?: 'Mutation', deleteUser?: { __typename?: 'DeleteUserPayload', id: string } | null };

export type UpdateUserMutationVariables = Exact<{
  id: Scalars['ID'];
  params: UserAttributes;
}>;


export type UpdateUserMutation = { __typename?: 'Mutation', updateUser?: { __typename?: 'UpdateUserPayload', user: { __typename?: 'User', id: string, email: string } } | null };

export type LearningGoalsQueryVariables = Exact<{ [key: string]: never; }>;


export type LearningGoalsQuery = { __typename?: 'Query', learningGoals: Array<{ __typename?: 'LearningGoal', id: string, title: string, body?: string | null }> };

export type UsersQueryVariables = Exact<{ [key: string]: never; }>;


export type UsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', id: string, email: string }> };


export const CreateLearningGoalDocument = gql`
    mutation createLearningGoal($params: LearningGoalAttributes!) {
  createLearningGoal(input: {params: $params}) {
    learningGoal {
      id
      title
      body
    }
  }
}
    `;
export type CreateLearningGoalMutationFn = Apollo.MutationFunction<CreateLearningGoalMutation, CreateLearningGoalMutationVariables>;

/**
 * __useCreateLearningGoalMutation__
 *
 * To run a mutation, you first call `useCreateLearningGoalMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateLearningGoalMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createLearningGoalMutation, { data, loading, error }] = useCreateLearningGoalMutation({
 *   variables: {
 *      params: // value for 'params'
 *   },
 * });
 */
export function useCreateLearningGoalMutation(baseOptions?: Apollo.MutationHookOptions<CreateLearningGoalMutation, CreateLearningGoalMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateLearningGoalMutation, CreateLearningGoalMutationVariables>(CreateLearningGoalDocument, options);
      }
export type CreateLearningGoalMutationHookResult = ReturnType<typeof useCreateLearningGoalMutation>;
export type CreateLearningGoalMutationResult = Apollo.MutationResult<CreateLearningGoalMutation>;
export type CreateLearningGoalMutationOptions = Apollo.BaseMutationOptions<CreateLearningGoalMutation, CreateLearningGoalMutationVariables>;
export const CreateLearningRecordDocument = gql`
    mutation createLearningRecord($params: LearningRecordAttributes!) {
  createLearningRecord(input: {params: $params}) {
    learningRecord {
      id
      startAt
      endingAt
      learningGoalId
    }
  }
}
    `;
export type CreateLearningRecordMutationFn = Apollo.MutationFunction<CreateLearningRecordMutation, CreateLearningRecordMutationVariables>;

/**
 * __useCreateLearningRecordMutation__
 *
 * To run a mutation, you first call `useCreateLearningRecordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateLearningRecordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createLearningRecordMutation, { data, loading, error }] = useCreateLearningRecordMutation({
 *   variables: {
 *      params: // value for 'params'
 *   },
 * });
 */
export function useCreateLearningRecordMutation(baseOptions?: Apollo.MutationHookOptions<CreateLearningRecordMutation, CreateLearningRecordMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateLearningRecordMutation, CreateLearningRecordMutationVariables>(CreateLearningRecordDocument, options);
      }
export type CreateLearningRecordMutationHookResult = ReturnType<typeof useCreateLearningRecordMutation>;
export type CreateLearningRecordMutationResult = Apollo.MutationResult<CreateLearningRecordMutation>;
export type CreateLearningRecordMutationOptions = Apollo.BaseMutationOptions<CreateLearningRecordMutation, CreateLearningRecordMutationVariables>;
export const CreateUserDocument = gql`
    mutation createUser($params: UserAttributes!) {
  createUser(input: {params: $params}) {
    user {
      id
      email
    }
  }
}
    `;
export type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;

/**
 * __useCreateUserMutation__
 *
 * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({
 *   variables: {
 *      params: // value for 'params'
 *   },
 * });
 */
export function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, options);
      }
export type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;
export type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;
export type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;
export const DeleteLearningGoalDocument = gql`
    mutation deleteLearningGoal($id: ID!) {
  deleteLearningGoal(input: {id: $id}) {
    id
  }
}
    `;
export type DeleteLearningGoalMutationFn = Apollo.MutationFunction<DeleteLearningGoalMutation, DeleteLearningGoalMutationVariables>;

/**
 * __useDeleteLearningGoalMutation__
 *
 * To run a mutation, you first call `useDeleteLearningGoalMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteLearningGoalMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteLearningGoalMutation, { data, loading, error }] = useDeleteLearningGoalMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteLearningGoalMutation(baseOptions?: Apollo.MutationHookOptions<DeleteLearningGoalMutation, DeleteLearningGoalMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteLearningGoalMutation, DeleteLearningGoalMutationVariables>(DeleteLearningGoalDocument, options);
      }
export type DeleteLearningGoalMutationHookResult = ReturnType<typeof useDeleteLearningGoalMutation>;
export type DeleteLearningGoalMutationResult = Apollo.MutationResult<DeleteLearningGoalMutation>;
export type DeleteLearningGoalMutationOptions = Apollo.BaseMutationOptions<DeleteLearningGoalMutation, DeleteLearningGoalMutationVariables>;
export const DeleteUserDocument = gql`
    mutation deleteUser($id: ID!) {
  deleteUser(input: {id: $id}) {
    id
  }
}
    `;
export type DeleteUserMutationFn = Apollo.MutationFunction<DeleteUserMutation, DeleteUserMutationVariables>;

/**
 * __useDeleteUserMutation__
 *
 * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDeleteUserMutation(baseOptions?: Apollo.MutationHookOptions<DeleteUserMutation, DeleteUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(DeleteUserDocument, options);
      }
export type DeleteUserMutationHookResult = ReturnType<typeof useDeleteUserMutation>;
export type DeleteUserMutationResult = Apollo.MutationResult<DeleteUserMutation>;
export type DeleteUserMutationOptions = Apollo.BaseMutationOptions<DeleteUserMutation, DeleteUserMutationVariables>;
export const UpdateUserDocument = gql`
    mutation updateUser($id: ID!, $params: UserAttributes!) {
  updateUser(input: {id: $id, params: $params}) {
    user {
      id
      email
    }
  }
}
    `;
export type UpdateUserMutationFn = Apollo.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>;

/**
 * __useUpdateUserMutation__
 *
 * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({
 *   variables: {
 *      id: // value for 'id'
 *      params: // value for 'params'
 *   },
 * });
 */
export function useUpdateUserMutation(baseOptions?: Apollo.MutationHookOptions<UpdateUserMutation, UpdateUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, options);
      }
export type UpdateUserMutationHookResult = ReturnType<typeof useUpdateUserMutation>;
export type UpdateUserMutationResult = Apollo.MutationResult<UpdateUserMutation>;
export type UpdateUserMutationOptions = Apollo.BaseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>;
export const LearningGoalsDocument = gql`
    query learningGoals {
  learningGoals {
    id
    title
    body
  }
}
    `;

/**
 * __useLearningGoalsQuery__
 *
 * To run a query within a React component, call `useLearningGoalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useLearningGoalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLearningGoalsQuery({
 *   variables: {
 *   },
 * });
 */
export function useLearningGoalsQuery(baseOptions?: Apollo.QueryHookOptions<LearningGoalsQuery, LearningGoalsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LearningGoalsQuery, LearningGoalsQueryVariables>(LearningGoalsDocument, options);
      }
export function useLearningGoalsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LearningGoalsQuery, LearningGoalsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LearningGoalsQuery, LearningGoalsQueryVariables>(LearningGoalsDocument, options);
        }
export type LearningGoalsQueryHookResult = ReturnType<typeof useLearningGoalsQuery>;
export type LearningGoalsLazyQueryHookResult = ReturnType<typeof useLearningGoalsLazyQuery>;
export type LearningGoalsQueryResult = Apollo.QueryResult<LearningGoalsQuery, LearningGoalsQueryVariables>;
export const UsersDocument = gql`
    query users {
  users {
    id
    email
  }
}
    `;

/**
 * __useUsersQuery__
 *
 * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUsersQuery({
 *   variables: {
 *   },
 * });
 */
export function useUsersQuery(baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);
      }
export function useUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);
        }
export type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;
export type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;
export type UsersQueryResult = Apollo.QueryResult<UsersQuery, UsersQueryVariables>;